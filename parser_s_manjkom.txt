import type { GraphData, NodeType, EdgeType } from '../types';

function getCustomerLabel(binaryLabel: string): string {
  switch (binaryLabel) {
    case "Office": return "Office";
    case "Outlook": return "EmailClient";
    case "Firefox": return "Browser";
    case "Financial App Client": return "Finance";
    default: return binaryLabel;
  }
}

function getBinaryLabel(sw: any): string {
  let name = sw?.name?.trim() || '';
  const cpe = sw?.cpe_idn || '';
  const idn = sw?.idn || '';

  let source = name || cpe || idn;

  // Ekstrahiraj ime nakon zadnjeg ':' ili '/'
  let extracted = source.split(/[:\/]/).pop() || source;
  // Ukloni sve nakon # (GUID)
  extracted = extracted.split('#')[0];
  // Zamijeni podvlake s razmakom i pretvori u mala slova
  let norm = extracted.replace(/_/g, ' ').toLowerCase();

  // Dodaj SQL Server 2019
  if (norm.includes('sql server 2019') || norm.includes('sql_server:2019') || norm.includes('sql server') && norm.includes('2019')) {
    return 'SQL Server 2019';
  }

  // Prepoznaj poznate servere
  if (norm.includes('internet banking')) return 'Internet Banking Server';
  if (norm.includes('exchange server')) return 'Exchange Server';
  if (norm.includes('windows server')) return 'Windows Server 2016';
  if (norm.includes('iis')) return 'IIS';
  if (norm.includes('.net')) return '.NET Framework';

  // Ako nema imena, poku≈°aj s CPE
  if (cpe.includes('microsoft:office')) return 'Office';
  if (cpe.includes('microsoft:outlook')) return 'Outlook';
  if (cpe.includes('mozilla:firefox')) return 'Firefox';
  if (cpe.includes('fin_app_client')) return 'Financial App Client';
  if (cpe.includes('internet_banking_server')) return 'Internet Banking Server';
  if (cpe.includes('exchange_server')) return 'Exchange Server';
  if (cpe.includes('windows_server_2016')) return 'Windows Server 2016';
  if (cpe.includes('sql_server:2019')) return 'SQL Server 2019';

  return extracted || source;
}

function formatServerId(rawCompId: string): string {
  // Pretvori None:0:0 ‚Üí server.0.0, None:0:2#1 ‚Üí server.0.2.1
  if (rawCompId.startsWith('None')) {
    return 'server.' + rawCompId
      .replace(/^None:/, '')
      .replace(/:/g, '.')
      .replace(/#/g, '.');
  }
  return rawCompId.replace(/:/g, '.').replace(/#/g, '.');
}

export function parseJSONToGraph(json: any, inputJson?: any): GraphData {
  const nodes: NodeType[] = [];
  const edges: EdgeType[] = [];
  const nodeIndex: Record<string, NodeType> = {};

  // 1. Sakupi SVE softvere koji su ovisnosti bilo gdje u cijelom JSON-u
  const globalDependencyIds = new Set<string>();
  for (const comp of Object.values(json.computers) as any[]) {
    if (comp.installed_software) {
      for (const sw of Object.values(comp.installed_software) as any[]) {
        for (const depId of (sw.local_dependencies || [])) {
          globalDependencyIds.add(depId);
        }
      }
    }
  }

  // üë• Dinamiƒçki dohvatimo sve uloge iz input.json
  const roles = new Set<string>();
  if (inputJson?.employee_groups) {
    for (const group of Object.values(inputJson.employee_groups) as any[]) {
      for (const role of Object.keys(group)) {
        roles.add(role);
      }
    }
  }

  // üë§ Kreiraj ƒçvorove za sve korisniƒçke uloge (user.png)
  for (const role of roles) {
    const roleId = `user-${role}`;
    if (!nodeIndex[roleId]) {
      nodeIndex[roleId] = {
        id: roleId,
        label: role,
        fullName: role,
        type: 'user',
        icon: '/icons/user.png',
        group: 'users'
      };
      nodes.push(nodeIndex[roleId]);
    }
  }

  for (const [rawCompId, comp] of Object.entries(json.computers) as [string, any][]) {
    const group = comp.network_idn || 'default';

    // 1. Sakupi sve lokalne ovisnosti na ovom raƒçunalu
    const dependencyIds = new Set<string>();
    if (comp.installed_software) {
      for (const sw of Object.values(comp.installed_software)) {
        const swObj = sw as any;
        for (const depId of (swObj.local_dependencies || [])) {
          dependencyIds.add(depId);
        }
      }
    }

    // üß† Izvuci person_id ako postoji
    let personId: string | undefined;
    let validSoftwareIds: string[] = [];

    if (comp.installed_software) {
      for (const [swId, sw] of Object.entries(comp.installed_software) as [string, any][]) {
        const isUserMachine = sw.person_index === 0;
        const isNetworkSoftware = sw.provides_network_services?.length > 0;

        if (isUserMachine || isNetworkSoftware) {
          validSoftwareIds.push(swId);
          if (isUserMachine && !personId && sw.person_group_id) {
            personId = sw.person_group_id;
          }
        }
      }
    }

    const hasPerson = !!personId;
    const isServer = !hasPerson && comp.provides_network_services?.length > 0;

    // üß© Ispravi ID i label servera
    const compId = isServer
      ? formatServerId(rawCompId)
      : rawCompId;

    const compLabel = compId.replace(/^None/, 'server').replace(/:/g, '.');

    // Preskoƒçi ako nema osoba ni softvera
    if (!hasPerson && validSoftwareIds.length === 0 && !isServer) continue;

    // üíª Computer/server ƒçvor
    if (!nodeIndex[compId]) {
      nodeIndex[compId] = {
        id: compId,
        label: compLabel,
        fullName: compId,
        type: 'computer',
        icon: '/icons/computer.png',
        group
      };
      nodes.push(nodeIndex[compId]);
    }

    // üë§ Povezivanje raƒçunala s korisnikom/ulogom
    if (hasPerson && personId) {
      const userNodeId = `user-${personId}`;

      if (nodeIndex[userNodeId]) {
        edges.push({
          id: `edge-${compId}-${userNodeId}`,
          source: compId,
          target: userNodeId,
          type: 'computer-user'
        });
      } else {
        if (!nodeIndex[personId]) {
          nodeIndex[personId] = {
            id: personId,
            label: personId,
            fullName: personId,
            type: 'person',
            icon: '/icons/user.png',
            group
          };
          nodes.push(nodeIndex[personId]);
        }
        edges.push({
          id: `edge-${compId}-${personId}`,
          source: compId,
          target: personId,
          type: 'computer-person'
        });
      }
    }

    // 2. Prika≈æi samo softver koji NIJE ovisnost na tom raƒçunalu
    for (const swId of validSoftwareIds) {
      const sw = comp.installed_software[swId];
      const binaryLabel = getBinaryLabel(sw);
      const binaryFullName = sw.name || sw.idn || sw.cpe_idn || swId;

      if (!binaryLabel) continue;
      // OVDJE JE KLJUƒå: preskoƒçi softver koji je ovisnost
      if (isServer && sw.idn && globalDependencyIds.has(sw.idn)) continue;

      // ...ostatak tvoje logike...
      if (!nodeIndex[swId]) {
        nodeIndex[swId] = {
          id: swId,
          label: binaryLabel,
          fullName: binaryFullName,
          type: 'software',
          icon: '/icons/binary.png',
          group
        };
        nodes.push(nodeIndex[swId]);
      }

      edges.push({
        id: `edge-${compId}-${swId}`,
        source: compId,
        target: swId,
        type: 'computer-software'
      });

      // --- CUSTOMER ƒçvorove dodaj samo za ureƒëaje s korisnikom ---
      if (hasPerson) {
        const customerLabel = getCustomerLabel(binaryLabel);
        const customerId = `${customerLabel}-${swId}`;
        if (!nodeIndex[customerId]) {
          nodeIndex[customerId] = {
            id: customerId,
            label: customerLabel,
            fullName: customerLabel,
            type: 'user-service',
            icon: '/icons/customer.png',
            group
          };
          nodes.push(nodeIndex[customerId]);
        }

        edges.push({
          id: `edge-${swId}-${customerId}`,
          source: swId,
          target: customerId,
          type: 'software-user-service'
        });
      }
      // üåê SERVICE ƒçvorovi (mre≈æni servisi)
      if (sw.provides_network_services) {
        for (const serviceName of sw.provides_network_services) {
          const serviceId = `${serviceName}-${swId}`;
          if (!nodeIndex[serviceId]) {
            nodeIndex[serviceId] = {
              id: serviceId,
              label: serviceName,
              fullName: serviceName,
              type: 'service',
              icon: '/icons/service.png',
              group
            };
            nodes.push(nodeIndex[serviceId]);
          }

          edges.push({
            id: `edge-${swId}-${serviceId}`,
            source: swId,
            target: serviceId,
            type: 'software-service'
          });
        }
      }
    }

    // Ako je server bez softvera, ali ima provides_network_services
    if (isServer && (!comp.installed_software || validSoftwareIds.length === 0)) {
      for (const serviceName of comp.provides_network_services || []) {
        const serviceId = `${serviceName}-${compId}`;
        if (!nodeIndex[serviceId]) {
          nodeIndex[serviceId] = {
            id: serviceId,
            label: serviceName,
            fullName: `${serviceName}-${compId}`,
            type: 'service',
            icon: '/icons/service.png',
            group
          };
          nodes.push(nodeIndex[serviceId]);
        }
        edges.push({
          id: `edge-${compId}-${serviceId}`,
          source: compId,
          target: serviceId,
          type: 'computer-service'
        });
      }
    }
  }

  return { nodes, edges };
} 